# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# Creators Table
type Creator @model @auth(rules: [
        {
            allow: owner,
            operations: [create, read, update, delete]
        },
        {
            allow: private,
            operations: [read]
        },
    ]){
    id: ID!
    cognitoId: String!
    username: String!
    preferred_username: String!
    profile: String!
    fits: [Fit] @hasMany(indexName: "byCreator", fields: ["id"])
    subscribers: [Subscriber] @manyToMany(relationName: "Subscriptions")
    workouts: [Workout] @hasMany(indexName: "byCreator", fields: ["id"])
    liveWorkouts: [LiveWorkout] @hasMany(indexName: "byCreator", fields: ["id"])
    workoutPlans: [WorkoutPlan] @hasMany(indexName: "byCreator", fields: ["id"])
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    owner: String
}

# Subscribers Table
type Subscriber @model @auth(rules: [
        {
            allow: owner,
            operations: [create, read, update, delete]
        },
        {
            allow: private,
            operations: [read]
        },
    ]){
    id: ID!
    cognitoId: String!
    username: String!
    preferred_username: String!
    profile: String!
    subscriptions: [Creator] @manyToMany(relationName: "Subscriptions")
    workouts: [SubscriberWorkout] @hasMany(indexName: "bySubscriber", fields: ["id"])
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    owner: String
}

# Fit Table
# This is a reusable data
# This shares a one-to-one with a WorkoutFit
# This doesn't have much information, therefore will be built upon by entities that share a one-to-one with it
type Fit @model @auth(rules: [
        {
            allow: owner,
            operations: [create, read, update, delete]
        },
        {
            allow: private,
            operations: [read]
        },
    ]){
    id: ID!
    creatorId: ID! @index(name: "byCreator", sortKeyFields: ["title"])
    title: String!
    description: String!
    bodyParts: [String!]!
    equipments: [String]
    videoUrls: [String!]!
    workoutFits: [WorkoutFit] @hasMany(indexName: "byFit", fields: ["id"])
    type: String @default(value: "Fit")
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    owner: String
}

# Workout Table
type Workout @model @auth(rules: [
        {
            allow: owner,
            operations: [create, read, update, delete]
        },
        {
            allow: private,
            operations: [read]
        },
    ]){
    id: ID!
    creatorId: ID! @index(name: "byCreator", sortKeyFields: ["title"])
    preferred_username: String!
    title: String!
    description: String!
    intensityLevel: String!
    bodyParts: [String!]!
    equipments: [String]!
    rounds: Int @default(value: "1")
    roundsInterval: Int @default(value: "0")
    exerciseInterval: Int @default(value: "0")
    setsInterval: Int @default(value: "0")
    thumbnailUrl: String!
    workoutFits: [WorkoutFit] @hasMany(indexName: "byWorkout", fields: ["id"])
    type: String!
    isLive: Boolean @default(value: "false")
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    owner: String
}

# Live Workout Table
type LiveWorkout @model @auth(rules: [
        {
            allow: owner,
            operations: [create, read, update, delete]
        },
        {
            allow: private,
            operations: [read]
        },
    ]){
    id: ID!
    creatorId: ID! @index(name: "byCreator", sortKeyFields: ["id"])
    workout: Workout @hasOne
    workoutSubscriptions: [SubscriberWorkout] @hasMany(indexName: "byLiveWorkout", fields: ["id"])
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    type: String @default(value: "LiveWorkout") @index(name: "liveWorkoutsByDate", queryField: "liveWorkoutsByDate", sortKeyFields: ["createdAt"])
    owner: String
}


# WorkoutFit Table
# This is a unit of a workout
# This shares a one-to-one relationship with a fit
# This enriches a Fit to include information for a workout
type WorkoutFit @model @auth(rules: [
        {
            allow: owner,
            operations: [create, read, update, delete]
        },
        {
            allow: private,
            operations: [read]
        },
    ]){
    id: ID!
    fitId: ID! @index(name: "byFit", sortKeyFields: ["id"])
    workoutId: ID! @index(name: "byWorkout", sortKeyFields: ["id"])
    fit: Fit @belongsTo(fields: ["fitId"])
    repsOrTime: String!
    repsOrTimeValue: Int!
    sets: Int @default(value: "0")
    index: Int!
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    owner: String
}

# SubscriberWorkout Table
type SubscriberWorkout @model @auth(rules: [
        {
            allow: owner,
            operations: [create, read, update, delete]
        },
    ]){
    id: ID!
    workoutId: ID! @index(name: "byLiveWorkout", sortKeyFields: ["id"])
    subscriberId: ID! @index(name: "bySubscriber", sortKeyFields: ["id"])
    workout: LiveWorkout @belongsTo(fields: ["workoutId"])
    type: String @default(value: "SubscriberWorkout") @index(name: "subscriberWorkoutsByDate", queryField: "subscriberWorkoutsByDate", sortKeyFields: ["createdAt"])
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    owner: String
}

# Workout Plan Table
type WorkoutPlan @model @auth(rules: [
        {
            allow: owner,
            operations: [create, read, update, delete]
        },
        {
            allow: private,
            operations: [read]
        },
    ]){
    id: ID!
    creatorID: ID! @index(name: "byCreator", sortKeyFields: ["title"])
    title: String!
    description: String!
    workoutDays: [WorkoutDay!]!
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    owner: String
}

type WorkoutDay {
    workoutId: String
    dayOfWeek: String!
    isRestDay: Boolean!
}


